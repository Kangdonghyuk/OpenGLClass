#include <GLUT/GLUT.h>
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#include <stdlib.h>
#include <math.h>
typedef GLint vertex2 [2];
vertex2 pt [8] = { {10, 80}, {15, 20}, {45, 20}, {40, 70}, {80, 70}, {85, 30}, {125, 10}, {120, 90} };
//-------------------------------------------------------------------------------------------
// 조명값 초기 설정 : X, Y, Z 값을 설정함.
//                마지막 값 : 1 ( 지정된위치)  , 0 (무한히 떨어진 곳)
//-------------------------------------------------------------------------------------------
GLfloat  whiteLight[ ] = { 0.2f, 0.2f, 0.2f, 1.0f };
GLfloat  sourceLight[ ] = { 0.8f, 0.8f, 0.8f, 1.0f };
GLfloat  lightPos[ ] = { 0.0f, 0.0f, 0.0f, 1.0f };
struct Camera
{
    GLfloat px; //카메라 위치를 나타냄.
    GLfloat py;
    GLfloat pz;
    GLfloat dx; //카메라가 바라보는 점.
    GLfloat dy;
    GLfloat dz;
    
    GLfloat ux; //UpVector
    GLfloat uy;
    GLfloat uz;
};
static Camera g_Camera;
//--------------------------------------------------------------------------------------------------------------------
// 함수설명 : 디스플레이 윈도우의 초기화 및 필요한 객체를 초기화한다.
//--------------------------------------------------------------------------------------------------------------------
// 부가설명 : OpenGL 의 Quadric 객체를 생성한다.
//--------------------------------------------------------------------------------------------------------------------
void init (void)
{
    // [1] ------------------------------------------------------------------------------------------------------------
    // 디스플레이 윈도우 색상을 검은색으로 지정한다.
    //-----------------------------------------------------------------------------------------------------------------
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f );
    
    // [2] ------------------------------------------------------------------------------------------------------------
    // 현재 드로잉 컬러로부터 재질 색을 할당하도록 한다.
    //-----------------------------------------------------------------------------------------------------------------
    glEnable(GL_COLOR_MATERIAL);
    
    //-----------------------------------------------------------------------------------------------------------------
    // GL_FRONT , GL_BACK , GL_FRONT_AND_BACK : 색상을 지정할 면을 선택
    //-----------------------------------------------------------------------------------------------------------------
    // GL_EMISSION(확산), GL_AMBIENT(주변광), GL_DIFFUSE(나반사광),
    // GL_SPECULAR(전반사광), GL_AMBIENT_AND_DIFFUSE : 재질 속성을 선택
    //-----------------------------------------------------------------------------------------------------------------
    glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
    // [3] --------------------------------------------------------------------------------------------------------
    // 은명제거를 위한 깊이검사, 폴리곤의 앞면 설정, 후면선별 기능을 설정한다.
    //-------------------------------------------------------------------------------------------------------------
    // GL_CULL_FACE : 폴리곤의 앞면이나 뒷면에 대한 조명효과, 쉐이딩,
    //                컬러연산등을 수행하지 않도록 한다.
    //-------------------------------------------------------------------------------------------------------------
    glEnable(GL_DEPTH_TEST);
    glFrontFace(GL_CCW);
    glEnable(GL_CULL_FACE);
    
    // [5] --------------------------------------------------------------------------------------------------------
    // 조명을 가능하게 한다.
    //-------------------------------------------------------------------------------------------------------------
    glEnable(GL_LIGHTING);
    
    // [6] --------------------------------------------------------------------------------------------------------
    // 조명에 대한 설정을 한다.
    //-------------------------------------------------------------------------------------------------------------
    // glLightModelfv : 조명 모델 인자를 설정함. 기본 주변광은
    //  RGBA(0.2,0.2,0.2,1.0) 으로 설정되어 있음.
    //-------------------------------------------------------------------------------------------------------------
    // glLightfv    : 8개의 광원 인자를 지정한다.
    //-------------------------------------------------------------------------------------------------------------
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT,whiteLight);
    glLightfv(GL_LIGHT0,GL_DIFFUSE,sourceLight);
    glLightfv(GL_LIGHT0,GL_POSITION,lightPos);
    // [6] -------------------------------------------------------------------------------
    // 조명 GL_LRIGHT(X) 를 가능하게 한다.  여기선 LIGHT0
    //------------------------------------------------------------------------------------
    glEnable(GL_LIGHT0);
    
    // [7] -------------------------------------------------------------------------------
    // Camera 의 초기값을 설정한다.
    //------------------------------------------------------------------------------------
    g_Camera.px = 0;
    g_Camera.py = 0;
    g_Camera.pz = 100;
    
    g_Camera.dx = 0.f;
    g_Camera.dy = 0.f;
    g_Camera.dz = 0.f;
    
    g_Camera.ux = 0.f;
    g_Camera.uy = 1.f;
    g_Camera.uz = 0.f;
}

//----------------------------------------------------------------------------------------
// 함수설명 : 사용한 리소스 및 객체를 제거한다.
//----------------------------------------------------------------------------------------
void exit (void)
{
}
//-----------------------------------------------------------------------------------------------------
// 함수설명 : 태양계를 그리며 움직임에 대한 설정을 한다.
//-----------------------------------------------------------------------------------------------------
void RenderScene(void)
{
    // [1] --------------------------------------------------------------------------------------------
    // 달과 지구의 공전 각도를 설정한다.
    //-------------------------------------------------------------------------------------------------
    static float fMoonRot = 0.0f;
    static float fEarthRot = 0.0f;
    
    // [2] --------------------------------------------------------------------------------------------
    // 윈도우의 배경을 지우도록 한다.  (특정버퍼나 혼홥된 버퍼를 비움)
    //-------------------------------------------------------------------------------------------------
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    // [3] --------------------------------------------------------------------------------------------
    // 행렬상태를 저장한 뒤 회전 변환한다.
    //-------------------------------------------------------------------------------------------------
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    // [4] ---------------------------------------------------------------------------------------------
    //  카메라의 위치와 방향을 지정한다.
    //--------------------------------------------------------------------------------------------------
    // 관측변환 (Viewing Transformation) 을 정의한다.
    //
    // void gluLookAt(GLdouble eyex, GLdouble eyey, GLdouble eyez,
    //                  GLdouble centerx, GLdouble centery, GLdouble centerz,
    //                GLdouble upx, GLdouble upy, GLdouble upz );
    //--------------------------------------------------------------------------------------------------
    // eyex, eyey, eyez          : 눈의 위치   (관측자의 시점)
    // centerx, centery, centerz : 화면의 중심 (관측자가 바라보는 점)
    // upx, upy, upz             : UP 벡터     (관측자가 바라보는 방향의 위쪽을 향함)
    //--------------------------------------------------------------------------------------------------
    gluLookAt( g_Camera.px,g_Camera.py,g_Camera.pz,
              g_Camera.dx,g_Camera.dy,g_Camera.dz,
              g_Camera.ux,g_Camera.uy,g_Camera.uz);
    
    // [5] ---------------------------------------------------------------------------------------------
    // 관측변환을 하기 전에 조명위치를 설정한다.
    //--------------------------------------------------------------------------------------------------
    glLightfv(GL_LIGHT0,GL_POSITION,lightPos);
    
    // [6] ---------------------------------------------------------------------------------------------
    // 전체 화면을 뒤로 이동하여 화면을 볼 수 있도록 설정한다.
    //--------------------------------------------------------------------------------------------------
    glTranslatef(0.0f, 0.0f, -300.0f);
    // [7] ----------------------------------------------------------------------------
    // 재질색은 적색으로 설정하고 태양을 그린다.
    //---------------------------------------------------------------------------------
    glColor3ub(255, 0, 0);
    glutSolidSphere(25.0f, 25, 25);
    
    // [8] ----------------------------------------------------------------------------
    // 태양을 그린 후, 빛의 위치를 옮긴다.
    //---------------------------------------------------------------------------------
    glLightfv(GL_LIGHT0,GL_POSITION,lightPos);
    
    // [9] ----------------------------------------------------------------------------
    // 좌표축을 회전한다.  ( y 축을 기준으로 회전함 )
    //---------------------------------------------------------------------------------
    glRotatef(fEarthRot, 0.0f, 1.0f, 0.0f);
    
    // [10] ---------------------------------------------------------------------------
    // 지구를 그린다. (태양과 105 만큼 떨여져 있게 그린다.)
    //---------------------------------------------------------------------------------
    glColor3ub(0,0,255);
    glTranslatef(105.0f,0.0f,0.0f);
    glutSolidSphere(18.0f, 20, 20);
    // [11] ----------------------------------------------------------------------------------
    // 지구를 기준으로 달을 그린다. (Transform 이 그대로 적용됨)
    //-----------------------------------------------------------------------------------------
    glColor3ub(200,200,200);
    glRotatef(fMoonRot,0.0f, 1.0f, 0.0f);
    glTranslatef(30.0f, 0.0f, 0.0f);
    
    glutSolidSphere(6.0f, 15, 15);
    
    // [12] ---------------------------------------------------------------------------------
    // 저장된 행렬상태를 복구한다.
    //----------------------------------------------------------------------------------------
    glPopMatrix();
    
    // [13] ---------------------------------------------------------------------------------
    // 지구의 공전 위치를 5도씩 증가시킴.
    // 달의 공전 위치를 15도씩 증가시킴.
    //----------------------------------------------------------------------------------------
    fMoonRot+= 15.0f;
    if(fMoonRot > 360.0f)  fMoonRot = 0.0f;
    
    fEarthRot += 5.0f;
    if(fEarthRot > 360.0f) fEarthRot = 0.0f;
    // [14] ---------------------------------------------------------------------
    // 버퍼를 이용하여 그려진 그림을 화면에 출력한다.
    //---------------------------------------------------------------------------
    glFlush();
    glutSwapBuffers();
}


//-------------------------------------------------------------------------------
// 함수설명 : 지정된 시간이 지난후 호출되는 콜백 함수
//-------------------------------------------------------------------------------
void TimerFunc(int value)
{
    // [1] ----------------------------------------------------------------------
    // GLUT 에게 현재 윈도우를 다시 그리도록 한다.
    //---------------------------------------------------------------------------
    glutPostRedisplay();
    
    // [2] ----------------------------------------------------------------------
    // 타이머를 다시 동작시킨다.
    //---------------------------------------------------------------------------
    glutTimerFunc(100, TimerFunc, 1);
}

//-------------------------------------------------------------------------------
// 함수설명 : 뷰포트와 관측공간을 변경한다.
//-------------------------------------------------------------------------------
// 부가설명 : 윈도우의 크기가 변경될 때 호출된다.
//-------------------------------------------------------------------------------
void ChangeSize(int w, int h)
{
    GLfloat fAspect;
    
    //---------------------------------------------------------------------------
    // 0으로 나눠지는 것을 방지한다.
    //---------------------------------------------------------------------------
    if(h == 0)  h = 1;
    
    // [1] ----------------------------------------------------------------------
    // 뷰포트를 윈도우 크기에 맞게 설정한다.
    //---------------------------------------------------------------------------
    glViewport(0, 0, w, h);
    
    // [2] ----------------------------------------------------------------------
    // 종횡비를 계산한다.
    //---------------------------------------------------------------------------
    fAspect = (GLfloat)w/(GLfloat)h;
    // [3] ----------------------------------------------------------------------
    // 프로젝션 행렬을 초기화한다.
    //---------------------------------------------------------------------------
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    
    // [4] ----------------------------------------------------------------------
    // 가시각도(화각) : 45도, near ,far :1.0 , 425
    //---------------------------------------------------------------------------
    gluPerspective(45.0f, fAspect, 100.0, 1000.0);
    
    // [5] ----------------------------------------------------------------------
    // 모델 관측 행렬을 초기화 한다.
    //---------------------------------------------------------------------------
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}
//-------------------------------------------------------------------------------
// 함수설명 : 화살표 키에 따라 이동, 회전, 크기변환을 수행한다.
//-------------------------------------------------------------------------------
void SpecialKeys(int key, int x, int y)
{
    if(key == GLUT_KEY_UP)
    {
        g_Camera.py += 1;
        g_Camera.dy += 1;
    }
    else if(key == GLUT_KEY_DOWN)
    {
        g_Camera.py -= 1;
        g_Camera.dy -= 1;
    }
    else if(key == GLUT_KEY_LEFT)
    {
        g_Camera.px -= 1;
        g_Camera.dx -= 1;
    }
    else if(key == GLUT_KEY_RIGHT)
    {
        g_Camera.px += 1;
        g_Camera.dx += 1;
    }
    
    // [1] ----------------------------------------------------------------------
    // GLUT 에게 현재 윈도우를 다시 그리도록 한다.
    //---------------------------------------------------------------------------
    glutPostRedisplay();
}
//-------------------------------------------------------------------------------
// 함수설명 : main 함수  (Program Entry Point)
//-------------------------------------------------------------------------------
// 부가설명 : 1. 윈도우 생성및 기본적인 초기화 작업을 수행함.
//               2. 함수를 호출하여 화면에 그림을 그림.
//-------------------------------------------------------------------------------
int main (int argc, char* argv[])
{
    glutInit(&argc, argv);
    
    // [1] ----------------------------------------------------------------------
    // 더블 버퍼링(Double Buffering) 을 사용하지 않음.
    //---------------------------------------------------------------------------
    // 더블 버퍼링은 glutSwapBuffers() 와 관련되어 있음.
    //---------------------------------------------------------------------------
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    
    glutInitWindowPosition(50, 100);   // Set top-left display-window position.
    glutInitWindowSize(400, 300);   // Set display-window width and height.
    glutCreateWindow("An Example OpenGL Program"); // Create display window.
    
    init();
    
    // [2] -------------------------------------------------------------------------------------------------------
    // 현재 윈도우에 대한 디스플레이 콜백 (call back) 함수를 설정한다.
    //------------------------------------------------------------------------------------------------------------
    // glutReshapeFunc : 윈도우 크기나 모양이 바뀔때 호출되는 콜백 함수 등록
    // glutTimerFunc   : 지정된 시간이 지난후 호출되는 콜백 함수를 등록.
    // glutKeyboardFunc: 윈도우에 대한 키보드 콜백함수를 등록.
    //------------------------------------------------------------------------------------------------------------
    glutReshapeFunc(ChangeSize);
    glutSpecialFunc(SpecialKeys);
    glutDisplayFunc(RenderScene);
    
    //------------------------------------------------------------------------------------------------------------
    // glutTimerFunc   : 윈도우즈 타이머와는 달리 이 함수는 단 한번만 작동한다.
    //------------------------------------------------------------------------------------------------------------
    glutTimerFunc(500, TimerFunc, 1);
    
    // [3] -------------------------------------------------------------------------------------------------------
    // 메인 GLUT 프로세싱 루프를 시작한다.
    //------------------------------------------------------------------------------------------------------------
    // glutMainLoop : 이벤트 핸들링 루프를 시작하며 프로그램을 종료
    //     할때까지 반환하지 않는다.
    //------------------------------------------------------------------------------------------------------------
    glutMainLoop();        
    exit();
    
    return 0;
}

